services:
        ## ------------------------------------------------------------------------------------------------------------------------------------------------
        ## Infrastructure
        ## ------------------------------------------------------------------------------------------------------------------------------------------------

        litestream:
                build:
                        context: ./litestream
                        dockerfile: ./litestream.Dockerfile
                        args:
                                buildtime_variable_arch: $ARCH
                image: litestream
                user: "1000:1000"
                volumes:
                        - ./litestream/litestream.yml:/etc/litestream.yml
                        - ./testdata/sqlite/integration:/opt/litestream/store
                environment:
                        LITESTREAM_ACCESS_KEY_ID: $LITESTREAM_ACCESS_KEY_ID
                        LITESTREAM_SECRET_ACCESS_KEY: $LITESTREAM_SECRET_ACCESS_KEY
                restart: always
                healthcheck:
                        test: ["CMD", "/opt/litestream/healthcheck.sh"]
                        interval: 1s
                        timeout: 10s
                        retries: 5
                        start_period: 60s

        minio:
                image: minio/minio
                volumes:
                        - ./testdata/minio:/data
                environment:
                        - "MINIO_ROOT_USER=s3_access_key"
                        - "MINIO_ROOT_PASSWORD=s3_access_secret"
                command: "server /data --console-address ':9001'"
                ports:
                        - "9001:9001"
                healthcheck:
                        test:
                                [
                                        "CMD",
                                        "curl",
                                        "-f",
                                        "http://minio:9000/minio/health/live",
                                ]
                        interval: 1s
                        timeout: 10s
                        retries: 5
                        start_period: 60s

        createbuckets:
                image: minio/mc
                entrypoint: >
                        /bin/sh -c "
                        /usr/bin/mc alias set testdata http://minio:9000 s3_access_key s3_access_secret;
                        /usr/bin/mc mb --ignore-existing testdata/testbucket;
                        /usr/bin/mc rm --recursive --force testdata/testbucket;
                        exit 0;
                        "
                depends_on:
                        minio:
                                condition: service_healthy
                                restart: true

        ## ------------------------------------------------------------------------------------------------------------------------------------------------

        tokentest:
                build:
                        context: .
                        dockerfile: ./tokentest.Dockerfile
                        args:
                                buildtime_variable_arch: $ARCH
                image: tokentest
                restart: always
                user: "1000:1000"
                environment:
                        JWT_COOKIE_NAME: $JWT_COOKIE_NAME
                        JWT_ISSUER: $JWT_ISSUER
                        JWT_SECRET: $JWT_SECRET
                        JWT_USER_EMAIL: $JWT_USER_EMAIL
                        JWT_COOKIE_DOMAIN: $JWT_COOKIE_DOMAIN
                        REDIRECT_URL: https://dev.binggl.net
                        PORT: 3000

        ## ------------------------------------------------------------------------------------------------------------------------------------------------
        ## Applications
        ## ------------------------------------------------------------------------------------------------------------------------------------------------

        core-3001:
                build:
                        context: .
                        dockerfile: ./core.Dockerfile
                        args:
                                buildtime_variable_arch: $ARCH
                image: core
                user: "1000:1000"
                volumes:
                        - ./internal/core:/opt/core/etc
                        - ./_logs:/opt/core/logs
                        - ./upload:/opt/core/uploads
                        - ./testdata/sqlite/integration:/store
                restart: always
                environment:
                        CO_BASECONFIG__ENVIRONMENT: Integration
                        CO_BASECONFIG__LOGGING__FILEPATH: /opt/core/logs/core-api.log
                        CO_BASECONFIG__LOGGING__GRAYLOGSERVER: $LOGGING_GRAYLOGSERVER
                        CO_BASECONFIG__ASSETS__ASSETDIR: ./assets
                        CO_SECURITY__JWTISSUER: $JWT_ISSUER
                        CO_SECURITY__JWTSECRET: $JWT_SECRET
                        CO_SECURITY__LOGINREDIRECT: https://dev.binggl.net
                        CO_OIDC__REDIRECTURL: "https://dev.binggl.net/oidc/signin"
                        CO_OIDC__CLIENTID: $OIDC_CLIENTID
                        CO_OIDC__CLIENTSECRET: $OIDC_CLIENTSECRET
                        CO_UPLOAD__UPLOADPATH: /opt/core/uploads
                        CO_UPLOAD__ENCGRPCCONN: crypter:3000
                        CO_UPLOAD__MAXUPLOADSIZE: 5000000
                        CO_DATABASE__CONNECTIONSTRING: /store/core.db
                depends_on:
                        litestream:
                                condition: service_healthy
                                restart: true

        mydms-3002:
                build:
                        context: .
                        dockerfile: ./mydms.Dockerfile
                        args:
                                buildtime_variable_arch: $ARCH
                image: mydms
                user: "1000:1000"
                volumes:
                        - ./internal/mydms:/opt/mydms/etc
                        - ./_logs:/opt/mydms/logs
                        - ./testdata/sqlite/integration:/store
                        - /tmp:/opt/mydms/uploads
                restart: always
                environment:
                        MY_BASECONFIG__ENVIRONMENT: Integration
                        MY_BASECONFIG__SECURITY__JWTISSUER: $JWT_ISSUER
                        MY_BASECONFIG__SECURITY__JWTSECRET: $JWT_SECRET
                        MY_BASECONFIG__SECURITY__CLAIM.URL: http://localhost:3002
                        MY_BASECONFIG__LOGGING__FILEPATH: /opt/mydms/logs/mydms-api.log
                        MY_BASECONFIG__LOGGING__GRAYLOGSERVER: $LOGGING_GRAYLOGSERVER
                        MY_BASECONFIG__ASSETS__ASSETDIR: ./assets
                        MY_DATABASE__CONNECTIONSTRING: /store/mydms.db
                        MY_UPLOAD__UPLOADPATH: /opt/mydms/uploads
                        MY_UPLOAD__MAXUPLOADSIZE: 5000000
                        MY_FILESTORE__REGION: "us-east-1"
                        MY_FILESTORE__BUCKET: "testbucket"
                        MY_FILESTORE__KEY: "s3_access_key"
                        MY_FILESTORE__SECRET: "s3_access_secret"
                        MY_FILESTORE__ENDPOINT: "http://minio:9000"

                depends_on:
                        litestream:
                                condition: service_healthy
                                restart: true

        bookmarks-3003:
                build:
                        context: .
                        dockerfile: ./bookmarks.Dockerfile
                        args:
                                buildtime_variable_arch: $ARCH
                image: bookmarks
                user: "1000:1000"
                volumes:
                        - ./internal/bookmarks:/opt/bookmarks/etc
                        - ./_logs:/opt/bookmarks/logs
                        - ./testdata/sqlite/integration:/store
                restart: always
                environment:
                        BM_BASECONFIG__ENVIRONMENT: Integration
                        BM_BASECONFIG__SECURITY__JWTISSUER: $JWT_ISSUER
                        BM_BASECONFIG__SECURITY__JWTSECRET: $JWT_SECRET
                        BM_BASECONFIG__LOGGING__FILEPATH: /opt/bookmarks/logs/bookmarks-api.log
                        BM_BASECONFIG__LOGGING__GRAYLOGSERVER: $LOGGING_GRAYLOGSERVER
                        BM_BASECONFIG__ASSETS__ASSETDIR: ./assets
                        BM_DATABASE__CONNECTIONSTRING: /store/bookmarks.db
                depends_on:
                        litestream:
                                condition: service_healthy
                                restart: true

        ## ------------------------------------------------------------------------------------------------------------------------------------------------

        caddy-integration-frontend-443:
                build:
                        context: .
                        dockerfile: ./caddy.Dockerfile
                        args:
                                buildtime_variable_arch: $ARCH
                image: frontend
                ports:
                        - "443:443"
                volumes:
                        - ./caddy/Caddyfile:/etc/caddy/Caddyfile
                        - ./caddy/certs:/opt/caddy/certs
                restart: on-failure
