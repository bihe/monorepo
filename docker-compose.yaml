version: '3'

services:

    tokentest:
        build:
            context: .
            dockerfile: ./tokentest.Dockerfile
        image: tokentest
        depends_on:
            - db
        networks:
            - app-network
        ports:
            - "4000:3000"
        restart:
            always
        environment:
            JWT_COOKIE_NAME: $JWT_COOKIE_NAME
            JWT_ISSUER: $JWTISSUER
            JWT_SECRET: $JWTSECRET
            JWT_USER_EMAIL: $JWT_USER_EMAIL
            REDIRECT_URL: http://localhost:3000
            PORT: 3000

    crypter:
        build:
            context: .
            dockerfile: ./crypter.Dockerfile
        image: crypter
        depends_on:
            - db
        networks:
            - app-network
        #ports:
        #    - "3333:3000/tcp"
        volumes:
            - ./internal/crypter:/opt/crypter/etc
            - ./_logs:/opt/crypter/logs
        restart:
            always
        environment:
            CR_ENVIRONMENT: Production
            CR_TOKENSECURITY.JWTISSUER: $JWTISSUER
            CR_TOKENSECURITY.JWTSECRET: $JWTSECRET
            CR_LOGGING.FILEPATH: /opt/crypter/logs/crypter-grpc-api.log
            CR_LOGGING.GRAYLOGSERVER: $LOGGING_GRAYLOGSERVER

    db:
        image: mariadb:10.4
        networks:
            - app-network
        ports:
            - "3306:3306"
        volumes:
            - ./db:/docker-entrypoint-initdb.d
        restart:
            on-failure
        healthcheck:
            test: "/usr/bin/mysql --host=127.0.0.1 --user=root --password=mariadb --execute \"SHOW DATABASES;\""
            interval: 4s
            timeout: 4s
            retries: 6
        environment:
            MYSQL_ROOT_PASSWORD: "mariadb"

    login-3001:
        build:
            context: .
            dockerfile: ./login.Dockerfile
        image: login
        depends_on:
            - db
        networks:
            - app-network
        ports:
            - "3001:3000"
        volumes:
            - ./internal/login:/opt/login/etc
            - ./_logs:/opt/login/logs
        restart:
            always
        environment:
            LO_ENVIRONMENT: Production
            LO_SECURITY.JWTISSUER: $JWTISSUER
            LO_SECURITY.JWTSECRET: $JWTSECRET
            LO_OIDC.CLIENTID: $OIDC_CLIENTID
            LO_OIDC.CLIENTSECRET: $OIDC_CLIENTSECRET
            LO_LOGGING.FILEPATH: /opt/login/logs/login-api.log
            LO_LOGGING.GRAYLOGSERVER: $LOGGING_GRAYLOGSERVER

    mydms-3002:
        build:
            context: .
            dockerfile: ./mydms.Dockerfile
        image: mydms
        depends_on:
            - db
        networks:
            - app-network
        ports:
            - "3002:3000"
        volumes:
            - ./internal/mydms:/opt/mydms/etc
            - ./_logs:/opt/mydms/logs
        restart:
            always
        environment:
            MY_BASECONFIG.ENVIRONMENT: Production
            MY_BASECONFIG.SECURITY.JWTISSUER: $JWTISSUER
            MY_BASECONFIG.SECURITY.JWTSECRET: $JWTSECRET
            MY_BASECONFIG.SECURITY.CLAIM.URL: http://localhost:3002
            MY_BASECONFIG.LOGGING.FILEPATH: /opt/mydms/logs/mydms-api.log
            MY_BASECONFIG.LOGGING.GRAYLOGSERVER: $LOGGING_GRAYLOGSERVER
            MY_FILESTORE.REGION: $FILESTORE_REGION
            MY_FILESTORE.BUCKET: $FILESTORE_BUCKET
            MY_FILESTORE.KEY: $FILESTORE_KEY
            MY_FILESTORE.SECRET: $FILESTORE_SECRET
            MY_UPLOAD.ENDPOINTURL: http://onefrontend-3000:3000

    bookmarks-3003:
        build:
            context: .
            dockerfile: ./bookmarks.Dockerfile
        image: bookmarks
        depends_on:
            - db
        networks:
            - app-network
        ports:
            - "3003:3000"
        volumes:
            - ./internal/bookmarks/etc:/opt/bookmarks/etc
            - ./_logs:/opt/bookmarks/logs
        restart:
            always
        environment:
            FRONTEND_MODE: integration
            BM_ENVIRONMENT: Production
            BM_SECURITY.JWTISSUER: $JWTISSUER
            BM_SECURITY.JWTSECRET: $JWTSECRET
            BM_LOGGING.FILEPATH: /opt/bookmarks/logs/bookmarks-api.log
            BM_LOGGING.GRAYLOGSERVER: $LOGGING_GRAYLOGSERVER

    onefrontend-3000:
        build:
            context: .
            args:
                FRONTEND_MODE: integration
            dockerfile: ./onefrontend.Dockerfile
        image: onefrontend
        depends_on:
            - db
        networks:
            - app-network
        ports:
            - "3000:3000"
        volumes:
            - ./internal/onefrontend/etc:/opt/onefrontend/etc
            - ./_logs:/opt/onefrontend/logs
        restart:
            always
        environment:
            ONE_ENVIRONMENT: Production
            ONE_JWT.JWTISSUER: $JWTISSUER
            ONE_JWT.JWTSECRET: $JWTSECRET
            ONE_LOGGING.FILEPATH: /opt/onefrontend/logs/onefrontend-api.log
            ONE_LOGGING.GRAYLOGSERVER: $LOGGING_GRAYLOGSERVER
            ONE_UPLOAD.ENCGRPCCONN: crypter:3000

networks:
    app-network: {}
