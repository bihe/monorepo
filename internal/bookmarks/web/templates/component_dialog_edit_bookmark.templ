package templates

import "golang.binggl.net/monorepo/internal/bookmarks/app/bookmarks"

type Bookmark struct {
	ID                 ValidatorInput
	Path               ValidatorInput
	DisplayName        ValidatorInput
	URL                ValidatorInput
	Type               bookmarks.NodeType
	CustomFavicon      ValidatorInput
	InvertFaviconColor bool
	UseCustomFavicon   bool
	Error              string
	Close              bool
}

type ValidatorInput struct {
	Val     string
	Valid   bool
	Message string
}

templ EditBookmarks(bm Bookmark, paths []string) {
	<div class="modal-dialog modal-xl" id="bookmark_edit_dialog">
		if bm.Close {
			<script type="text/javascript">
				bootstrap.Modal.getInstance('#modals-here').toggle();
			</script>
		} else {
			<div class="modal-content">
				<div class="modal-header">
					if bm.ID.Val != "-1" {
						<h5 class="modal-title">Edit Bookmark '{ bm.DisplayName.Val }'</h5>
					} else {
						<h5 class="modal-title">Create Bookmark</h5>
					}
					<div id="indicator" class="htmx-indicator">
						<div class="spinner-border text-light" role="status">
							<span class="visually-hidden">Loading...</span>
						</div>
					</div>
				</div>
				<form class="bookmark_edit_form">
					<input type="hidden" name="bookmark_ID" value={ bm.ID.Val }/>
					<div class="modal-body">
						<div class="form-check form-check-inline">
							<input class={ "form-check-input", templ.KV("disable", (bm.ID.Val != "-1")) } type="radio" name="bookmark_Type" id="type_Bookmark" value="Node" checked?={ bm.Type == bookmarks.Node }/>
							<label class={ "form-check-label", templ.KV("disable", (bm.ID.Val != "-1")) } for="type_Bookmark">Bookmark</label>
						</div>
						<div class="form-check form-check-inline">
							<input class={ "form-check-input", templ.KV("disable", (bm.ID.Val != "-1")) } type="radio" name="bookmark_Type" id="type_Folder" value="Folder" checked?={ bm.Type == bookmarks.Folder }/>
							<label class={ "form-check-label", templ.KV("disable", (bm.ID.Val != "-1")) } for="type_Folder">Folder</label>
						</div>
						<div class="spacer"></div>
						<div class="flex_layout">
							<div class="bookmark_edit_layout_flex_5">
								<img id="bookmark_favicon_display" class={ "bookmark_favicon_preview", templ.KV("invert", bm.InvertFaviconColor) } src={ "/bm/favicon/" + bm.ID.Val }/>
							</div>
							<div class="bookmark_edit_layout_flex_95 form-floating mb-3">
								<input type="text" class={ "form-control", templ.KV("control_invalid", !bm.DisplayName.Valid) } class="" id="bookmark_DisplayName" placeholder="Displayname" name="bookmark_DisplayName" value={ bm.DisplayName.Val } required/>
								<label for="bookmark_DisplayName">DisplayName</label>
							</div>
						</div>
						if bm.Type == bookmarks.Node {
							<div class="input-group mb-3" id="url_section">
								<span class="input-group-text" id="url"><i class="bi bi-link-45deg"></i></span>
								<input type="text" id="bookmark_URL" class={ "form-control", templ.KV("control_invalid", !bm.URL.Valid) } placeholder="URL" aria-label="URL" aria-describedby="url" name="bookmark_URL" value={ bm.URL.Val }/>
								<button
									type="button"
									class="btn btn-outline-secondary"
									hx-post="/bm/favicon/page"
									hx-trigger="click"
									hx-target="#bookmark_favicon_display"
									hx-params="bookmark_URL"
									hx-swap="outerHTML"
									hx-indicator="#indicator"
								><i class="bi bi-arrow-clockwise"></i></button>
							</div>
						}
						<div class="form-floating mb-3">
							<select class="form-select" aria-label="Path" id="bookmark_Path" name="bookmark_Path" required>
								if bm.ID.Val != "-1" {
									for _, p := range paths {
										<option value={ p } selected?={ bm.Path.Val == p }>{ p }</option>
									}
								} else {
									<option value={ bm.Path.Val } selected>{ bm.Path.Val }</option>
								}
							</select>
							<label for="bookmark_Path">Path</label>
						</div>
						<div class="form-check form-switch">
							<input class="form-check-input" type="checkbox" role="switch" id="bookmark_Invert" name="bookmark_InvertFaviconColor" value="1" checked?={ bm.InvertFaviconColor }/>
							<label class="form-check-label" for="bookmark_Invert">Invert Favicon Color</label>
						</div>
						<div class="form-check form-switch">
							<input class="form-check-input" type="checkbox" role="switch" id="bookmark_Custom_Favicon" name="bookmark_UseCustomFavicon" value="1" checked?={ bm.UseCustomFavicon }/>
							<label class="form-check-label" for="bookmark_Custom_Favicon">Custom Favicon</label>
						</div>
						<div id="custom_favicon_section" class={ templ.KV("d-none", !bm.UseCustomFavicon) }>
							<div class="spacer"></div>
							<div class="input-group mb-3">
								<input
									type="text"
									class={ "form-control", templ.KV("control_invalid", !bm.CustomFavicon.Valid) }
									placeholder="Favicon URL"
									aria-label="Favicon URL"
									aria-describedby="Favicon URL"
									name="bookmark_CustomFavicon"
									value={ bm.CustomFavicon.Val }
								/>
								<button
									type="button"
									class="btn btn-outline-secondary"
									hx-post="/bm/favicon/url"
									hx-trigger="click"
									hx-target="#bookmark_favicon_display"
									hx-params="bookmark_CustomFavicon"
									hx-swap="outerHTML"
									hx-indicator="#indicator"
								><i class="bi bi-arrow-clockwise"></i></button>
							</div>
							<label for="customFaviconUpload" class="form-label">Upload a custom icon</label>
							<div class="input-group mb-3">
								<input
									class="form-control"
									type="file"
									name="bookmark_customFaviconUpload"
									id="customFaviconUpload"
									accept="image/*,.png,.jpeg,.jpg,.gif,.svg"
								/>
								<button
									type="button"
									id="btnUploadCustomFavicon"
									class="btn btn-outline-secondary"
									hx-post="/bm/favicon/upload"
									hx-encoding="multipart/form-data"
									hx-trigger="click"
									hx-target="#bookmark_favicon_display"
									hx-params="bookmark_customFaviconUpload"
									hx-swap="outerHTML"
									hx-indicator="#indicator"
								><i class="bi bi-upload"></i></button>
							</div>
						</div>
						<div id="error_section" class={ "error_text", templ.KV("d-none", bm.Error == "") }>
							<div class="spacer"></div>
							<i class="bi bi-exclamation-diamond"></i>&nbsp;<span>{ bm.Error }</span>
						</div>
						<div id="info_section" class="info_text d-none">
							<div class="spacer"></div>
							<i class="bi bi-info-circle"></i>&nbsp;<span id="info_section_text">TEXT</span>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
						<button
							id="btn-bookmark-save"
							type="button"
							class="btn btn-success"
							hx-post="/bm"
							hx-target="#bookmark_edit_dialog"
						>Save</button>
					</div>
				</form>
			</div>
			<script type="text/javascript">
				if (document.querySelector('#type_Bookmark')) {
					document.querySelector('#type_Bookmark').addEventListener('change', (event) => {
						if (event.target.value === 'Node') {
						document.querySelector('#url_section').classList.remove('d-none');
						} else {
						document.querySelector('#url_section').classList.add('d-none');
						}
					});
				}

				if (document.querySelector('#type_Folder')) {
					document.querySelector('#type_Folder').addEventListener('change', (event) => {
						if (event.target.value === 'Folder') {
						document.querySelector('#url_section').classList.add('d-none');
						} else {
						document.querySelector('#url_section').classList.remove('d-none');
						}
					});
				}

				if (document.querySelector('#bookmark_Custom_Favicon')) {
					document.querySelector('#bookmark_Custom_Favicon').addEventListener('change', (event) => {
						if (event.currentTarget.checked) {
						document.querySelector('#custom_favicon_section').classList.remove('d-none');
						} else {
						document.querySelector('#custom_favicon_section').classList.add('d-none');
						}
					});
				}

				if (document.querySelector('#bookmark_Invert')) {
					document.querySelector('#bookmark_Invert').addEventListener('change', (event) => {
						if (event.currentTarget.checked) {
						document.querySelector('#bookmark_favicon_display').classList.add('invert');
						} else {
						document.querySelector('#bookmark_favicon_display').classList.remove('invert');
						}
					});
				}

				if (document.querySelector('.bookmark_edit_form')) {
					document.querySelector('.bookmark_edit_form').addEventListener('paste', e => {
						if (!e.clipboardData.items || e.clipboardData.items.length == 0) {
							showInfoText(`Nothing to paste from clipboard!`);
							return;
						}
						try {
							// get the first item of the clipboard
							var item = e.clipboardData.items[0];
							if (item.type.indexOf("image") === 0 || item.type.indexOf("svg") === 0) {
								let fileInput = document.querySelector('#customFaviconUpload');
								let dataTransfer = new DataTransfer();
								let blob = item.getAsFile();
								let uuid = window.crypto.randomUUID()
								dataTransfer.items.add(blob);
								fileInput.files = dataTransfer.files;

								console.log('files for upload: ' + fileInput.files.length);
								showInfoText(`Pasted file '${blob.name}' from clipboard!`);
							} else {
								showInfoText(`No image in clipboard!`);
							}
						} catch (e) {
							console.log("could not set clipboard image!");
							console.log(e);
						}

					})
				}

				function showInfoText(text) {
					if (document.querySelector('#info_section')) {
						if (document.querySelector('#info_section_text')) {
							document.querySelector('#info_section_text').textContent = text;
							document.querySelector('#info_section').classList.remove('d-none');

							setTimeout(() => {
								document.querySelector('#info_section_text').textContent = '';
								document.querySelector('#info_section').classList.add('d-none')
							}, 2000);
						}
					}
				}
			</script>
		}
	</div>
}
