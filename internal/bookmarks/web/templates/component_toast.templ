package templates

type MessageModel struct {
	Title string
	Text  string
	Type  string
	Show  bool
}

const (
	MessageTypeInfo    = "info"
	MessageTypeError   = "error"
	MessageTypeSuccess = "success"
)

func ShowErrorToast(title, message string) MessageModel {
	return showToastMessage(title, message, MessageTypeError)
}

func ShowInfoToast(title, message string) MessageModel {
	return showToastMessage(title, message, MessageTypeInfo)
}

func ShowSuccessToast(title, message string) MessageModel {
	return showToastMessage(title, message, MessageTypeSuccess)
}

func showToastMessage(title, message, msgType string) MessageModel {
	return MessageModel{
		Title: title,
		Text:  message,
		Type:  msgType,
		Show:  true,
	}
}

templ Toast(model MessageModel) {
	<div class="toast-container position-fixed bottom-0 end-0 p-3">
		<div id="infoToast" class={ "toast", templ.KV("show", (model.Show)) } role="alert" data-type={ model.Type }>
			switch model.Type {
				case "info":
					<div class="toast-header" style="background-color: var(--bs-info);color:black;">
						<i class="bi bi-info-circle"></i>&nbsp;
						<strong class="me-auto">{ model.Title }</strong>
						<small></small>
						<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
					</div>
				case "error":
					<div class="toast-header" style="background-color: var(--bs-danger);color:white;">
						<i class="bi bi-exclamation-triangle"></i>&nbsp;
						<strong class="me-auto">{ model.Title }</strong>
						<small></small>
						<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
					</div>
				case "success":
					<div class="toast-header" style="background-color: var(--bs-success);color:white;">
						<i class="bi bi-check"></i>&nbsp;
						<strong class="me-auto">{ model.Title }</strong>
						<small></small>
						<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
					</div>
				default:
					<div class="toast-header" style="background-color: var(--bs-gray-500);color:black;">
						<strong class="me-auto">{ model.Title }</strong>
						<small></small>
						<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
					</div>
			}
			<div class="toast-body">{ model.Text }</div>
		</div>
	</div>
	if model.Show {
		<script type="text/javascript">
        if (document.querySelector('#infoToast')) {
            if (document.querySelector('#infoToast').classList.contains('show')) {
                let type = document.querySelector('#infoToast').dataset.type;
                if (type != 'error') {
                        setTimeout(() => {
                            // time to say goodbye
                            document.querySelector('#infoToast').classList.remove('show');
                    }, 2500);
                }
            }
        }
        </script>
	}
}
