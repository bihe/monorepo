definitions:
  appinfo.AppInfo:
    properties:
      userInfo:
        $ref: '#/definitions/appinfo.UserInfo'
        type: object
      versionInfo:
        $ref: '#/definitions/appinfo.VersionInfo'
        type: object
    type: object
  appinfo.UserInfo:
    properties:
      displayName:
        description: DisplayName of authenticated user
        type: string
      email:
        description: Email of authenticated user
        type: string
      roles:
        description: Roles the authenticated user possesses
        items:
          type: string
        type: array
      userId:
        description: UserID of authenticated user
        type: string
      userName:
        description: UserName of authenticated user
        type: string
    type: object
  appinfo.VersionInfo:
    properties:
      buildNumber:
        description: BuildNumber defines the specific build
        type: string
      version:
        description: Version of the application
        type: string
    type: object
  documents.Document:
    properties:
      alternativeId:
        type: string
      amount:
        type: number
      created:
        type: string
      fileName:
        type: string
      id:
        type: string
      modified:
        type: string
      previewLink:
        type: string
      senders:
        items:
          type: string
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      uploadFileToken:
        type: string
    type: object
  documents.PagedDcoument:
    properties:
      documents:
        items:
          $ref: '#/definitions/documents.Document'
        type: array
      totalEntries:
        type: integer
    type: object
  documents.Result:
    properties:
      message:
        type: string
      result:
        type: integer
    type: object
  documents.SearchResult:
    properties:
      length:
        type: integer
      result:
        items:
          type: string
        type: array
    type: object
  errors.ProblemDetail:
    properties:
      detail:
        description: Detail is a human-readable explanation specific to this occurrence
          of the problem
        type: string
      instance:
        description: Instance is a URI reference that identifies the specific occurrence
          of the problem
        type: string
      status:
        description: Status is the HTTP status code
        type: integer
      title:
        description: Title is a short, human-readable summary of the problem type
        type: string
      type:
        description: |-
          Type is a URI reference [RFC3986] that identifies the
          problem type.  This specification encourages that, when
          dereferenced, it provide human-readable documentation for the problem
        type: string
    type: object
  upload.Result:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
info:
  contact: {}
  description: This is the API of the mydms application
  license:
    name: MIT License
    url: https://raw.githubusercontent.com/bihe/mydms-go/master/LICENSE
  title: mydms API
  version: "2.0"
paths:
  /api/v1/appinfo:
    get:
      description: meta-data of the application including authenticated user and version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/appinfo.AppInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: provides information about the application
      tags:
      - appinfo
  /api/v1/documents:
    post:
      consumes:
      - application/json
      description: use the supplied document payload and store the data
      parameters:
      - description: document payload
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/documents.Document'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/documents.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: save a document
      tags:
      - documents
  /api/v1/documents/{id}:
    delete:
      description: use the supplied id to delete the document from the store
      parameters:
      - description: document ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/documents.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: delete a document by id
      tags:
      - documents
    get:
      description: use the supplied id to lookup the document from the store
      parameters:
      - description: document ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/documents.Document'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: get a document by id
      tags:
      - documents
  /api/v1/documents/{type}/search:
    get:
      consumes:
      - application/json
      description: search either by tags or senders with the supplied search term
      parameters:
      - description: search type tags || senders
        in: path
        name: type
        required: true
        type: string
      - description: search term
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/documents.SearchResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: search for tags/senders
      tags:
      - documents
  /api/v1/documents/search:
    get:
      description: use filters to search for docments. the result is a paged set
      parameters:
      - description: title search
        in: query
        name: title
        type: string
      - description: tag search
        in: query
        name: tag
        type: string
      - description: sender search
        in: query
        name: sender
        type: string
      - description: start date
        in: query
        name: from
        type: string
      - description: end date
        in: query
        name: to
        type: string
      - description: limit max results
        in: query
        name: limit
        type: integer
      - description: skip N results
        in: query
        name: skip
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/documents.PagedDcoument'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: search for documents
      tags:
      - documents
  /api/v1/file:
    get:
      description: use a base64 encoded path to fetch the binary payload of a file
        from the store
      parameters:
      - description: Path
        in: query
        name: path
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: get a file from the backend store
      tags:
      - filestore
  /api/v1/uploads/file:
    post:
      description: temporarily stores a file and creates a item in the repository
      parameters:
      - description: file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/upload.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: upload a document
      tags:
      - upload
swagger: "2.0"
