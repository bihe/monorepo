// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: filecrypt.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CrypterRequest_PayloadType int32

const (
	CrypterRequest_PDF CrypterRequest_PayloadType = 0
)

// Enum value maps for CrypterRequest_PayloadType.
var (
	CrypterRequest_PayloadType_name = map[int32]string{
		0: "PDF",
	}
	CrypterRequest_PayloadType_value = map[string]int32{
		"PDF": 0,
	}
)

func (x CrypterRequest_PayloadType) Enum() *CrypterRequest_PayloadType {
	p := new(CrypterRequest_PayloadType)
	*p = x
	return p
}

func (x CrypterRequest_PayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrypterRequest_PayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_filecrypt_proto_enumTypes[0].Descriptor()
}

func (CrypterRequest_PayloadType) Type() protoreflect.EnumType {
	return &file_filecrypt_proto_enumTypes[0]
}

func (x CrypterRequest_PayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrypterRequest_PayloadType.Descriptor instead.
func (CrypterRequest_PayloadType) EnumDescriptor() ([]byte, []int) {
	return file_filecrypt_proto_rawDescGZIP(), []int{0, 0}
}

type CrypterResponse_OperationResult int32

const (
	CrypterResponse_SUCCESS CrypterResponse_OperationResult = 0
	CrypterResponse_ERROR   CrypterResponse_OperationResult = 1
)

// Enum value maps for CrypterResponse_OperationResult.
var (
	CrypterResponse_OperationResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR",
	}
	CrypterResponse_OperationResult_value = map[string]int32{
		"SUCCESS": 0,
		"ERROR":   1,
	}
)

func (x CrypterResponse_OperationResult) Enum() *CrypterResponse_OperationResult {
	p := new(CrypterResponse_OperationResult)
	*p = x
	return p
}

func (x CrypterResponse_OperationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrypterResponse_OperationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_filecrypt_proto_enumTypes[1].Descriptor()
}

func (CrypterResponse_OperationResult) Type() protoreflect.EnumType {
	return &file_filecrypt_proto_enumTypes[1]
}

func (x CrypterResponse_OperationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrypterResponse_OperationResult.Descriptor instead.
func (CrypterResponse_OperationResult) EnumDescriptor() ([]byte, []int) {
	return file_filecrypt_proto_rawDescGZIP(), []int{1, 0}
}

// CrypterRequest contains the binary payload, the initial password and the new password
// a authToken needs to be supplied which is evaluated to check if the usage of the service is allowed
type CrypterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken    string                     `protobuf:"bytes,1,opt,name=authToken,proto3" json:"authToken,omitempty"`
	Payload      []byte                     `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Type         CrypterRequest_PayloadType `protobuf:"varint,3,opt,name=type,proto3,enum=CrypterRequest_PayloadType" json:"type,omitempty"`
	InitPassword string                     `protobuf:"bytes,4,opt,name=initPassword,proto3" json:"initPassword,omitempty"`
	NewPassword  string                     `protobuf:"bytes,5,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *CrypterRequest) Reset() {
	*x = CrypterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecrypt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrypterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrypterRequest) ProtoMessage() {}

func (x *CrypterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecrypt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrypterRequest.ProtoReflect.Descriptor instead.
func (*CrypterRequest) Descriptor() ([]byte, []int) {
	return file_filecrypt_proto_rawDescGZIP(), []int{0}
}

func (x *CrypterRequest) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *CrypterRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CrypterRequest) GetType() CrypterRequest_PayloadType {
	if x != nil {
		return x.Type
	}
	return CrypterRequest_PDF
}

func (x *CrypterRequest) GetInitPassword() string {
	if x != nil {
		return x.InitPassword
	}
	return ""
}

func (x *CrypterRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

// CrypterResponse returns the encrypted payload, an operation result and optional message
type CrypterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte                          `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Result  CrypterResponse_OperationResult `protobuf:"varint,2,opt,name=result,proto3,enum=CrypterResponse_OperationResult" json:"result,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CrypterResponse) Reset() {
	*x = CrypterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecrypt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrypterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrypterResponse) ProtoMessage() {}

func (x *CrypterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecrypt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrypterResponse.ProtoReflect.Descriptor instead.
func (*CrypterResponse) Descriptor() ([]byte, []int) {
	return file_filecrypt_proto_rawDescGZIP(), []int{1}
}

func (x *CrypterResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CrypterResponse) GetResult() CrypterResponse_OperationResult {
	if x != nil {
		return x.Result
	}
	return CrypterResponse_SUCCESS
}

func (x *CrypterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_filecrypt_proto protoreflect.FileDescriptor

var file_filecrypt_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x16, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x44, 0x46, 0x10, 0x00, 0x22, 0xaa, 0x01, 0x0a, 0x0f,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a,
	0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x32, 0x39, 0x0a, 0x07, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x0f,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_filecrypt_proto_rawDescOnce sync.Once
	file_filecrypt_proto_rawDescData = file_filecrypt_proto_rawDesc
)

func file_filecrypt_proto_rawDescGZIP() []byte {
	file_filecrypt_proto_rawDescOnce.Do(func() {
		file_filecrypt_proto_rawDescData = protoimpl.X.CompressGZIP(file_filecrypt_proto_rawDescData)
	})
	return file_filecrypt_proto_rawDescData
}

var file_filecrypt_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_filecrypt_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_filecrypt_proto_goTypes = []interface{}{
	(CrypterRequest_PayloadType)(0),      // 0: CrypterRequest.PayloadType
	(CrypterResponse_OperationResult)(0), // 1: CrypterResponse.OperationResult
	(*CrypterRequest)(nil),               // 2: CrypterRequest
	(*CrypterResponse)(nil),              // 3: CrypterResponse
}
var file_filecrypt_proto_depIdxs = []int32{
	0, // 0: CrypterRequest.type:type_name -> CrypterRequest.PayloadType
	1, // 1: CrypterResponse.result:type_name -> CrypterResponse.OperationResult
	2, // 2: Crypter.Encrypt:input_type -> CrypterRequest
	3, // 3: Crypter.Encrypt:output_type -> CrypterResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_filecrypt_proto_init() }
func file_filecrypt_proto_init() {
	if File_filecrypt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_filecrypt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrypterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecrypt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrypterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_filecrypt_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_filecrypt_proto_goTypes,
		DependencyIndexes: file_filecrypt_proto_depIdxs,
		EnumInfos:         file_filecrypt_proto_enumTypes,
		MessageInfos:      file_filecrypt_proto_msgTypes,
	}.Build()
	File_filecrypt_proto = out.File
	file_filecrypt_proto_rawDesc = nil
	file_filecrypt_proto_goTypes = nil
	file_filecrypt_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrypterClient is the client API for Crypter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrypterClient interface {
	// Encrypt takes a CrypterRequest and performs encryption operation
	// the result of the operation is returned as a CrypterResponse
	Encrypt(ctx context.Context, in *CrypterRequest, opts ...grpc.CallOption) (*CrypterResponse, error)
}

type crypterClient struct {
	cc grpc.ClientConnInterface
}

func NewCrypterClient(cc grpc.ClientConnInterface) CrypterClient {
	return &crypterClient{cc}
}

func (c *crypterClient) Encrypt(ctx context.Context, in *CrypterRequest, opts ...grpc.CallOption) (*CrypterResponse, error) {
	out := new(CrypterResponse)
	err := c.cc.Invoke(ctx, "/Crypter/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrypterServer is the server API for Crypter service.
type CrypterServer interface {
	// Encrypt takes a CrypterRequest and performs encryption operation
	// the result of the operation is returned as a CrypterResponse
	Encrypt(context.Context, *CrypterRequest) (*CrypterResponse, error)
}

// UnimplementedCrypterServer can be embedded to have forward compatible implementations.
type UnimplementedCrypterServer struct {
}

func (*UnimplementedCrypterServer) Encrypt(context.Context, *CrypterRequest) (*CrypterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}

func RegisterCrypterServer(s *grpc.Server, srv CrypterServer) {
	s.RegisterService(&_Crypter_serviceDesc, srv)
}

func _Crypter_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrypterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrypterServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Crypter/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrypterServer).Encrypt(ctx, req.(*CrypterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crypter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Crypter",
	HandlerType: (*CrypterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _Crypter_Encrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filecrypt.proto",
}
