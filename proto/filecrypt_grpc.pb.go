// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrypterClient is the client API for Crypter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrypterClient interface {
	// Encrypt takes a CrypterRequest and performs encryption operation
	// the result of the operation is returned as a CrypterResponse
	Encrypt(ctx context.Context, in *CrypterRequest, opts ...grpc.CallOption) (*CrypterResponse, error)
}

type crypterClient struct {
	cc grpc.ClientConnInterface
}

func NewCrypterClient(cc grpc.ClientConnInterface) CrypterClient {
	return &crypterClient{cc}
}

func (c *crypterClient) Encrypt(ctx context.Context, in *CrypterRequest, opts ...grpc.CallOption) (*CrypterResponse, error) {
	out := new(CrypterResponse)
	err := c.cc.Invoke(ctx, "/proto.Crypter/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrypterServer is the server API for Crypter service.
// All implementations must embed UnimplementedCrypterServer
// for forward compatibility
type CrypterServer interface {
	// Encrypt takes a CrypterRequest and performs encryption operation
	// the result of the operation is returned as a CrypterResponse
	Encrypt(context.Context, *CrypterRequest) (*CrypterResponse, error)
	mustEmbedUnimplementedCrypterServer()
}

// UnimplementedCrypterServer must be embedded to have forward compatible implementations.
type UnimplementedCrypterServer struct {
}

func (UnimplementedCrypterServer) Encrypt(context.Context, *CrypterRequest) (*CrypterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedCrypterServer) mustEmbedUnimplementedCrypterServer() {}

// UnsafeCrypterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrypterServer will
// result in compilation errors.
type UnsafeCrypterServer interface {
	mustEmbedUnimplementedCrypterServer()
}

func RegisterCrypterServer(s grpc.ServiceRegistrar, srv CrypterServer) {
	s.RegisterService(&Crypter_ServiceDesc, srv)
}

func _Crypter_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrypterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrypterServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Crypter/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrypterServer).Encrypt(ctx, req.(*CrypterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Crypter_ServiceDesc is the grpc.ServiceDesc for Crypter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crypter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Crypter",
	HandlerType: (*CrypterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _Crypter_Encrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/filecrypt.proto",
}
